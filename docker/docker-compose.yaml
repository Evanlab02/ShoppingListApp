services:
  dev-shopping-app-pgadmin:
    container_name: shopping-pgadmin
    image: dpage/pgadmin4:8.5
    environment:
      PGADMIN_DEFAULT_EMAIL: ${DEV_PGADMIN_DEFAULT}
      PGADMIN_DEFAULT_PASSWORD: ${DEV_PGADMIN_PASSWORD}
      SCRIPT_NAME: /pgadmin
    networks:
      - dev-postgres-django-network
    restart: always
    volumes:
      - dev-pgadmin-data:/var/lib/pgadmin

  dev-shopping-app-db:
    container_name: shopping-db
    image: postgres:16.2-alpine3.18
    environment:
      POSTGRES_USER: ${DEV_DATABASE_USER}
      POSTGRES_PASSWORD: ${DEV_DATABASE_PASSWORD}
      POSTGRES_DB: ${DEV_DATABASE_NAME}
    volumes:
      - dev-postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${DEV_DATABASE_USER}" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - dev-postgres-django-network
    restart: always

  dev-shopping-django-administration:
    container_name: shopping-django-admin
    build:
      context: ../
      dockerfile: docker/admin/Dockerfile
    environment:
      DEFAULT_SETTINGS_MODULE: shoppingapp.settings.dev_settings
      DEV_DATABASE_USER: ${DEV_DATABASE_USER}
      DEV_DATABASE_PASSWORD: ${DEV_DATABASE_PASSWORD}
      DEV_DATABASE_NAME: ${DEV_DATABASE_NAME}
      DEV_DJANGO_KEY: ${DEV_DJANGO_KEY}
      DEV_DJANGO_HOST: ${DEV_DJANGO_HOST}
      DEV_DB_PORT: ${DEV_DB_PORT}
      DEV_DB_HOST: ${DEV_DB_HOST}
    command: /bin/bash -c "python manage.py migrate && python manage.py runserver"
    depends_on:
      dev-shopping-app-db:
        condition: service_healthy
    networks:
      - dev-postgres-django-network

  dev-shopping-django-app:
    container_name: shopping-django-app
    build:
      context: ../
      dockerfile: docker/server/Dockerfile
    environment:
      DEFAULT_SETTINGS_MODULE: shoppingapp.settings.dev_settings
      DEV_DATABASE_USER: ${DEV_DATABASE_USER}
      DEV_DATABASE_PASSWORD: ${DEV_DATABASE_PASSWORD}
      DEV_DATABASE_NAME: ${DEV_DATABASE_NAME}
      DEV_DJANGO_KEY: ${DEV_DJANGO_KEY}
      DEV_DJANGO_HOST: ${DEV_DJANGO_HOST}
      DEV_DB_PORT: ${DEV_DB_PORT}
      DEV_DB_HOST: ${DEV_DB_HOST}
    command: "gunicorn -b 0.0.0.0:80 -w 4 --worker-class uvicorn.workers.UvicornWorker 'shoppingapp.config.asgi:main()'"
    depends_on:
      dev-shopping-app-db:
        condition: service_healthy
    networks:
      - dev-postgres-django-network
    restart: always
    develop:
      watch:
        - action: sync+restart
          path: ../src/authentication
          target: /src/authentication
        - action: sync+restart
          path: ../src/stores
          target: /src/stores
        - action: sync+restart
          path: ../src/items
          target: /src/items
        - action: sync+restart
          path: ../src/shoppingapp
          target: /src/shoppingapp
        - action: rebuild
          path: ../src/requirements.txt

  dev-shopping-django-site:
    container_name: shopping-django-site
    build:
      context: ../
      dockerfile: docker/site/Dockerfile
    expose:
      - "80"
      - "9999"
    ports:
      - "8000:80"
      - "9999:9999"
    depends_on:
      dev-shopping-app-db:
        condition: service_healthy
    networks:
      - dev-postgres-django-network
    restart: always
    develop:
      watch:
        - action: sync+restart
          path: ../src/Caddyfile
          target: /etc/caddy/Caddyfile
        - action: sync+restart
          path: ../src/static
          target: /var/www/html/static/
        - action: sync+restart
          path: ../src/htmlcov
          target: /var/www/html/htmlcov/

networks:
  dev-postgres-django-network:
    driver: bridge

volumes:
  dev-postgres-data:
    external: false
  dev-pgadmin-data:
    external: false
